{"version":3,"sources":["../../es6/toolbar.js"],"names":[],"mappings":"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","file":"toolbar.js","sourcesContent":["/**\n * This module implements the toolbar that is on most of the panels.\n *\n * @module toolbar\n *\n * @author Marcello Perathoner\n */\n\ndefine ([\n    'jquery',\n    'lodash',\n    'bootstrap',\n    'bootstrap-slider',\n    'css!bootstrap-slider-css',\n    'css!toolbar-css',\n],\n\nfunction ($, _) {\n    function get_control_type ($input) {\n        return $input.attr ('data-type') || $input.attr ('type') || 'button';\n    }\n\n    function connectivity_formatter (s) {\n        return (s === 21) ? 'All' : s;\n    }\n\n    /**\n     * Read the status of the toolbar buttons after event\n     *\n     * @function handle_toolbar_events\n     *\n     * @param {Object} event - The event.  The status is saved in\n     *                         event.data.data\n     */\n\n    function handle_toolbar_events (event) {\n        if (event.type === 'click' || event.type === 'slideStop') {\n            var opts    = event.data.data;\n            var $target = $ (event.target);\n            var $group  = $target.closest ('.btn-group');\n            var name    = $target.attr ('name');\n            var type    = get_control_type ($target);\n\n            switch (type) {\n            case 'checkbox':\n                opts[name] = [];\n                $group.find ('input:checked').each (function (i, btn) {\n                    opts[name].push ($ (btn).attr ('data-opt'));\n                });\n                break;\n            case 'radio':\n                opts[name] = $target.attr ('data-opt');\n                break;\n            case 'slider':\n                opts[name] = $target.bootstrapSlider ('getValue');\n                break;\n            case 'dropdown':\n                opts[name] = $target.attr ('data-opt');\n                var $dropdown = $group.parent ().closest ('.btn-group').find ('button[data-toggle=\"dropdown\"]');\n                $dropdown.dropdown ('toggle'); // close\n                break;\n            default:\n            }\n        }\n    }\n\n    function on_toolbar (event) {\n        var instance = event.data;\n\n        handle_toolbar_events (event);\n        instance.load (instance.data.passage);\n\n        event.stopPropagation ();\n    }\n\n    /**\n     * Set the status of the toolbar buttons\n     *\n     * @function set_toolbar_buttons\n     *\n     * @param {jQuery} $toolbar   - The toolbar\n     * @param {Object} new_status - The new status of the toolbar buttons\n     */\n\n    function set_toolbar_buttons ($toolbar, new_status) {\n        var $panel = $toolbar.closest ('div.panel');\n\n        _.forEach (new_status, function (value, key) {\n            var $input = $panel.find ('input[name=\"' + key  + '\"]');\n            var $group = $input.closest ('.btn-group');\n            var type   = get_control_type ($input);\n\n            switch (type) {\n            case 'checkbox':\n                $group.find ('label.btn').removeClass ('active');\n                $group.find ('input').prop ('checked', false);\n\n                _.forEach (value, function (v) {\n                    $input = $group.find ('input[name=\"' + key  + '\"][data-opt=\"' + v + '\"]');\n                    $input.prop ('checked', true);\n                    $input.closest ('label.btn').addClass ('active');\n                });\n                break;\n            case 'radio':\n                $input = $group.find ('input[name=\"' + key  + '\"][data-opt=\"' + value + '\"]');\n                $input.checked = true;\n                $group.find ('label.btn').removeClass ('active');\n                $input.closest ('label.btn').addClass ('active');\n                break;\n            case 'slider':\n                $input.bootstrapSlider ('setValue', +value);\n                $panel.find ('span.connectivity-label').text (connectivity_formatter (value));\n                break;\n            case 'dropdown':\n                if (key === 'hyp_a') {\n                    key = 'labez';\n                }\n                var $dropdown = $group.parent ().closest ('.btn-group').find ('button[data-toggle=\"dropdown\"]');\n                $dropdown.attr ('data-' + key, value);\n                var i18n = $.trim ($group.find (`label.btn[data-${key}=\"${value}\"]`).text ());\n                $dropdown.find ('span.btn_text').text (i18n);\n                break;\n            default:\n            }\n        });\n    }\n\n    /**\n     * Loads the buttons in the labez dropdown.\n     *\n     * Loads the buttons in the labez dropdown with the labez of the readings of\n     * the passage.\n     *\n     * @function load_labez_dropdown\n     *\n     * @param {jQuery} $group      - The button group\n     * @param {Object} passage     - The passage\n     * @param {string} input_name  - <input name=name ...>\n     * @param {Array} prefixes     - Strings to prepend to the list.\n     * @param {Array} suffixes     - Strings to append to the list.\n     *\n     * @return {Promise} Promise, resolved when the buttons are loaded.\n     */\n\n    function load_labez_dropdown ($group, passage, input_name, prefixes, suffixes) {\n        var deferred = $.Deferred ();\n        var $menu = $group.find ('div[data-toggle=\"buttons\"]');\n\n        $.getJSON ('passage.json/' + passage.pass_id, json => {\n            $menu.empty ();\n            var readings = prefixes.concat (json.data.readings).concat (suffixes);\n            for (const [labez, labez_i18n] of readings) {\n                if (labez[0] !== 'z') {\n                    $menu.append (`<label class=\"btn btn-primary btn-labez bg_labez\" data-labez=\"${labez}\">\n                                     <input type=\"radio\" data-type=\"dropdown\" name=\"${input_name}\"\n                                            data-opt=\"${labez}\">${labez_i18n}</input>\n                                   </label>`);\n                }\n            }\n            deferred.resolve ();\n        });\n        return deferred.promise ();\n    }\n\n    /**\n     * Loads the buttons in the cliques dropdown.\n     *\n     * Loads the buttons in the cliques dropdown with the cliques of the\n     * passage.\n     *\n     * @function load_cliques_dropdown\n     *\n     * @param {jQuery} $group      - The button group\n     * @param {Object} passage     - The passage\n     * @param {string} input_name  - <input name=name ...>\n     * @param {Array} prefixes     - Strings to prepend to the list.\n     * @param {Array} suffixes     - Strings to append to the list.\n     *\n     * @return {Promise} Promise, resolved when the buttons are loaded.\n     */\n\n    function load_cliques_dropdown ($group, passage, input_name, prefixes, suffixes) {\n        var deferred = $.Deferred ();\n        var $menu = $group.find ('div[data-toggle=\"buttons\"]');\n\n        $.getJSON ('passage.json/' + passage.pass_id, json => {\n            $menu.empty ();\n            var cliques = prefixes.concat (json.data.cliques).concat (suffixes);\n            for (const [labez, , clique] of cliques) {\n                if (labez[0] !== 'z') {\n                    $menu.append (`<label class=\"btn btn-primary btn-labez bg_labez\" data-labez=\"${labez}\">\n                                     <input type=\"radio\" data-type=\"dropdown\" name=\"${input_name}\"\n                                            data-opt=\"${clique}\">${clique}</input>\n                                   </label>`);\n                }\n            }\n            deferred.resolve ();\n        });\n        return deferred.promise ();\n    }\n\n    /**\n     * Loads the buttons in the range dropdown.\n     *\n     * Loads the buttons in the range dropdown with the ranges of the book.\n     *\n     * @function load_range_dropdown\n     *\n     * @param {jQuery} $group      - The button group\n     * @param {Object} passage     - The passage\n     * @param {string} input_name  - The button(s) name\n     * @param {Array} prefixes     - Strings to prepend to the list.\n     * @param {Array} suffixes     - Strings to append to the list.\n     *\n     * @return {Promise} Promise, resolved when the buttons are loaded.\n     */\n\n    function load_range_dropdown ($group, passage, input_name, prefixes, suffixes) {\n        var deferred = $.Deferred ();\n        var $menu = $group.find ('div[data-toggle=\"buttons\"]');\n\n        $.getJSON ('ranges.json/' + passage.pass_id, json => {\n            $menu.empty ();\n            var ranges = prefixes.concat (json.data.ranges).concat (suffixes);\n            for (const range of ranges) {\n                $menu.append (`<label class=\"btn btn-primary btn-range\" data-range=\"${range.value}\">\n                                 <input type=\"radio\" data-type=\"dropdown\" name=\"${input_name}\"\n                                        data-opt=\"${range.value}\">${range.range}</input>\n                               </label>`);\n            }\n            deferred.resolve ();\n        });\n        return deferred.promise ();\n    }\n\n    /**\n     * Initialize the module.\n     *\n     * @function init\n     *\n     * @param {Object} instance - The panel instance\n     * @param {Object} $toolbar - The toolbar element\n     *\n     * @returns {Object} The module instance object\n     */\n\n    function init (instance, $toolbar) {\n        instance.$toolbar = $toolbar;\n\n        // Init toolbar.\n        $toolbar.find ('.dropdown-toggle').dropdown ();\n\n        $toolbar.find ('input[name=\"connectivity\"]').bootstrapSlider ({\n            'value'           : 5,\n            'ticks'           : [1,  5, 10, 20,  21],\n            'ticks_positions' : [0, 25, 50, 90, 100],\n            'formatter'       : connectivity_formatter,\n        });\n\n        // Answer toolbar activity.\n        $toolbar.on ('click slideStop', 'input', instance, on_toolbar);\n        return instance;\n    }\n\n    return {\n        'init'                  : init,\n        'set_toolbar_buttons'   : set_toolbar_buttons,\n        'load_labez_dropdown'   : load_labez_dropdown,\n        'load_cliques_dropdown' : load_cliques_dropdown,\n        'load_range_dropdown'   : load_range_dropdown,\n    };\n});\n"]}