{"version":3,"sources":["../../es6/d3-chord-layout.js"],"names":[],"mappings":"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","file":"d3-chord-layout.js","sourcesContent":["/**\n * This module converts a graph in .dot format into a SVG chord layout.\n *\n * @module d3-chord-layout\n * @author Marcello Perathoner\n */\n\ndefine ([\n    'jquery',\n    'lodash',\n    'd3',\n    'd3-common',\n],\n\nfunction ($, _, d3, d3_common) {\n    /**\n     * Create an SVG graph from a dot file.\n     *\n     * @function load_dot\n     *\n     * @param {string} url - The url (must serve dot format).\n     *\n     * @returns {Promise} - A promise resolved when all SVG elements have been created.\n     */\n    function load_dot (url) {\n        let instance = this;\n        // let dot_dpi = 72;\n        let css_dpi = 96;\n\n        let svg = instance.svg;\n        svg.selectAll ('g').transition ().duration (300).style ('opacity', 0.0)\n            .remove ();\n        let deferred = new $.Deferred ();\n\n        d3_common.dot (url, (graph) => {\n            // copy subgraph nodes into the main graph\n            _.forEach (graph.subgraphs, (subgraph) => {\n                let subgraph_nodes = _.keyBy (_.filter (subgraph.stmts,\n                    (o) => o.type === 'node'), 'id');\n                _.assign (graph.nodes, subgraph_nodes); // copy\n                subgraph.attrs = _.keyBy (_.filter (subgraph.stmts,\n                    (o) => o.type === 'attr'), 'attrType');\n            });\n\n            // hierarchify and cluster\n            //\n            // The idea is to build a hierarchy starting from a (fictional)\n            // root, then going thru a tier of labez (or labez_clique) and finally\n            // down to the manuscripts.\n\n            let data = [];\n            data.push ({\n                'id'        : 'root',\n                'parent_id' : null,\n                'attrs'     : {},\n            });\n            _.forEach (graph.subgraphs, (subgraph) => {\n                data.push ({\n                    'id'        : subgraph.id,\n                    'parent_id' : 'root',\n                    'attrs'     : subgraph.attrs,\n                });\n                let subgraph_nodes = _.filter (\n                    subgraph.stmts, (o) => o.type === 'node');\n                _.forEach (subgraph_nodes, (node) => {\n                    data.push ({\n                        'id'        : node.id,\n                        'parent_id' : subgraph.id,\n                        'attrs'     : node.attrs,\n                    });\n                });\n            });\n\n            let root = d3.stratify ()\n                .id (d => d.id)\n                .parentId (d => d.parent_id) (data);\n\n            // sort nodes\n            //\n            // sort nodes in order to minimize link crossings\n\n            _.forEach (graph.edges, (edge) => {\n                let n0 = graph.nodes[edge.elems[0].id];\n                let n1 = graph.nodes[edge.elems[1].id];\n                n0.attrs.other_labez = n1.attrs.labez;\n                n1.attrs.other_labez = n0.attrs.labez;\n                n0.attrs.other_hsnr  = n1.attrs.hsnr;\n                n1.attrs.other_hsnr  = n0.attrs.hsnr;\n            });\n\n            root.sort ((a, b) => {\n                // only sort leaf nodes\n                if (a.depth < 2) {\n                    return 0;\n                }\n                //\n                let attrs_a = a.data.attrs;\n                let attrs_b = b.data.attrs;\n                if (attrs_a.labez === 'a') {\n                    // order by other_labez DESC, hsnr\n                    return (attrs_b.other_labez + attrs_a.hsnr).localeCompare (\n                        attrs_a.other_labez + attrs_b.hsnr);\n                }\n                // order by other_labez DECS, other_hsnr DESC\n                return (attrs_b.other_labez + attrs_b.other_hsnr).localeCompare (\n                    attrs_a.other_labez + attrs_a.other_hsnr);\n            });\n\n            // calculate the radius, etc.\n\n            let node_width  = graph.attrs.node.attrs.width;      // in inch\n            let node_height = graph.attrs.node.attrs.height;     // in pt\n            let font_size   = graph.attrs.graph.attrs.fontsize;  // in pt\n\n            let node_width_px  = node_width * css_dpi;\n            let node_height_px = node_width * css_dpi;\n            let n_nodes = root.leaves ().length;\n            let n_groups = root.children.length;\n            let radius = 1.2 * Math.max (\n                (((n_nodes * node_height_px) + (n_groups * node_height_px / 2)) / (2 * Math.PI)),\n                2 * node_height_px\n            );\n            let label_radius = radius + (1.5 * node_width_px);\n\n            d3.cluster ()\n                .size ([360, radius])\n                .separation ((a, b) => a.parent === b.parent ? 1 : 1.5) (root);\n\n            let id2node = {};\n            root.each ((n) => {\n                id2node[n.id] = n;\n            });\n\n            svg.style ('opacity', 0.0);\n            svg.style ('font-size', font_size + 'pt');\n\n            let g = svg.append ('g');\n\n            // draw the nodes: an ellipse and a text in a group\n\n            let ng = g.append ('g').attr ('class', 'nodes')\n                .attr ('transform', 'rotate(-90)'); // put origin at 12 hours\n\n            ng.selectAll ('g.group')\n                .data (root.children)\n                .enter ()\n                .append ('g')\n                .attr ('class', 'group')\n                .attr ('transform',\n                    d => 'rotate(' + d.x + ') translate(' + label_radius + ') rotate (' + (90 - d.x) + ')')\n                .append ('text')\n                .attr ('class', 'group')\n                .text (d => d.data.attrs.graph.attrs.label);\n\n            let node = ng.selectAll ('g.node')\n                .data (root.leaves ())\n                .enter ()\n                .append ('g')\n                .attr ('data-ms-id', d => d.data.attrs.ms_id)\n                .attr ('class', 'node node-leaf')\n                .attr ('transform', d => 'rotate(' + d.x + ') translate(' + radius + ')');\n\n            node.append ('ellipse')\n                .attr ('class', 'node fg_labez bg_clique')\n                .attr ('data-labez',        d => d.data.attrs.labez)\n                .attr ('data-clique',       d => d.data.attrs.clique)\n                .attr ('data-labez-clique', d => d.data.attrs.labez_clique)\n                .attr ('rx', d => (d.data.attrs.width  || node_width)  * css_dpi / 2)\n                .attr ('ry', d => (d.data.attrs.height || node_height) * css_dpi / 2)\n                .on ('mouseenter', (d) => {\n                    d3.selectAll ('.link.' + instance.id_prefix + 'sid-' + d.id).classed ('hover hi-source', true);\n                    d3.selectAll ('.link.' + instance.id_prefix + 'tid-' + d.id).classed ('hover hi-target', true);\n                })\n                .on ('mouseleave', (d) => {\n                    d3.selectAll ('.link.' + instance.id_prefix + 'sid-' + d.id).classed ('hover hi-source', false);\n                    d3.selectAll ('.link.' + instance.id_prefix + 'tid-' + d.id).classed ('hover hi-target', false);\n                });\n\n            node.append ('text')\n                .attr ('class', 'node')\n                .attr ('transform', d => d.x < 180 ? null : 'rotate(180)')\n                .text (d => d.data.attrs.hs);\n\n            // draw the links: a path and a text\n\n            let lg = g.append ('g').attr ('class', 'links');\n\n            let link = lg.selectAll ('path.link')\n                .data (graph.edges)\n                .enter ()\n                .each ((d) => {\n                    d.source = id2node[d.elems[0].id];\n                    d.target = id2node[d.elems[1].id];\n                });\n\n            let line = d3.radialLine ()\n                .radius (d => d.y - ((d.data.attrs.width || node_width) * css_dpi / 2))\n                .angle  (d => d.x / 180 * Math.PI)\n                .curve (d3.curveBundle.beta (0.5));\n\n            link.append ('path')\n                .attr ('id', d => d.id)\n                .attr ('data-labez', d => graph.nodes[d.elems[0].id].attrs.labez)\n                .attr ('class', (d) => {\n                    return 'link fg_labez ' +\n                        instance.id_prefix + 'sid-' + d.elems[0].id + ' ' +\n                        instance.id_prefix + 'tid-' + d.elems[1].id +\n                        (/dashed/.test (d.attrs.style) ? ' dashed' : '');\n                })\n                .attr ('marker-end', 'url(#' + instance.id_prefix + 'triangle)')\n                /* .merge (graph.edges) */\n                .attr ('d', d => line (d.source.path (d.target)));\n\n            // WARNING: This works only if the <g> and all its parents are visible.\n            let bbox = g.node ().getBBox ();\n            g.attr ('transform', 'translate(' + (-bbox.x) + ', ' + (-bbox.y) + ')');\n\n            svg.transition ('svg')\n                .duration (300)\n                .attr ('height', bbox.height)\n                .attr ('width',  bbox.width)\n                .transition ()\n                .duration (300)\n                .style ('opacity', 1.0);\n\n            // shrinkwrap\n            instance.bbox = bbox;\n\n            // done\n            deferred.resolve ();\n        });\n        return deferred.promise ();\n    }\n\n    /**\n     * Initialize the module.\n     *\n     * @function init\n     *\n     * @param {string} wrapper_selector - A d3|jQuery selector that points to\n     * the element inside of which the graph will be placed.\n     *\n     * @param {string} id_prefix - The prefix to add to all ids.  Use if you have\n     * more than one graph on a page.\n     *\n     * @returns {Graph} - A graph instance.\n     */\n    function init ($wrapper, id_prefix) {\n        let svg = d3.select ($wrapper.get (0)).append ('svg');\n\n        d3_common.append_marker (svg, id_prefix);\n\n        return {\n            'id_prefix' : id_prefix,\n            'wrapper'   : $wrapper,\n            'svg'       : svg,\n            'load_dot'  : load_dot,\n            'bbox'      : null,\n        };\n    }\n\n    return {\n        'init' : init,\n    };\n});\n"]}