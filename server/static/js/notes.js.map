{"version":3,"sources":["../../es6/notes.es6"],"names":[],"mappings":";;AAAA;;;;;;;AAOA,OAAQ,CACJ,QADI,EAEJ,eAFI,CAAR,EAKA,UAAU,CAAV,EAAa;AACT,aAAS,UAAT,CAAqB,QAArB,EAA+B;AAC3B,YAAI,MAAM,SAAS,SAAnB;AACA,YAAI,aAAa,IAAI,IAAJ,CAAU,cAAV,CAAjB;AACA,YAAI,GAAJ,CAAS,QAAT,EAAmB,KAAnB,EAH2B,CAGA;AAC3B,YAAI,aAAa,IAAI,IAAJ,CAAU,cAAV,CAAjB;AACA,YAAI,GAAJ,CAAS,QAAT,EAAmB,UAAnB,EAL2B,CAKK;AAChC,YAAI,OAAJ,CAAa,EAAE,UAAW,UAAb,EAAb,EAAwC,EAAE,YAAa,GAAf,EAAoB,SAAU,KAA9B,EAAxC;AACH;;AAED,aAAS,OAAT,CAAkB,QAAlB,EAA4B;AACxB,mBAAY,QAAZ;AACA,iBAAS,YAAT,CAAsB,IAAtB,CAA4B,UAA5B,EAAwC,SAAS,aAAT,IAA0B,SAAS,SAAT,CAAmB,GAAnB,EAAlE;AACA,UAAG,QAAH,EAAa,OAAb,CAAsB,mBAAtB;AACH;;AAED;;;;;;;AAOA,aAAS,YAAT,CAAuB,OAAvB,EAAgC;AAC5B,YAAI,WAAW,IAAf;AACA,iBAAS,OAAT,GAAmB,OAAnB;AACA,YAAI,MAAM,SAAS,SAAnB;;AAEA,YAAI,MAAM,eAAe,QAAQ,OAAjC;AACA,YAAI,QAAQ,IAAI,OAAJ,CAAa,EAAE,WAAY,GAAd,EAAb,EAAkC,GAAlC,CAAZ;AACA,YAAI,MAAM,EAAE,GAAF,CAAO,GAAP,CAAV;;AAEA,UAAE,IAAF,CAAQ,GAAR,EAAa,KAAb,EAAoB,IAApB,CAA0B,YAAY;AAClC,gBAAI,GAAJ,CAAS,IAAI,YAAb;AACA,gBAAI,OAAJ,CAAa,EAAE,WAAY,GAAd,EAAb,EAAkC,GAAlC;AACA,qBAAS,aAAT,GAAyB,IAAI,GAAJ,EAAzB;AACA,oBAAS,QAAT;AACH,SALD;AAMH;;AAED,aAAS,YAAT,CAAuB,QAAvB,EAAiC;AAC7B,YAAI,MAAM,eAAe,SAAS,OAAT,CAAiB,OAA1C;AACA,UAAE,IAAF,CAAQ;AACJ,mBAAY,GADR;AAEJ,sBAAY,KAFR;AAGJ,oBAAY,EAAE,WAAY,SAAS,SAAT,CAAmB,GAAnB,EAAd,EAHR;AAIJ,uBAAY,iBAAU,MAAV,EAAkB;AAC1B,yBAAS,aAAT,GAAyB,SAAS,SAAT,CAAmB,GAAnB,EAAzB;AACA,wBAAS,QAAT;AACH;AAPG,SAAR;AASH;;AAED;;;;;;;;;;AAUA,aAAS,IAAT,CAAe,QAAf,EAAyB,eAAzB,EAA0C;AACtC,iBAAS,YAAT,GAAwB,YAAxB;AACA,UAAE,MAAF,CAAU,SAAS,IAAnB,EAAyB,EAAzB;AACA,iBAAS,SAAT,GAAqB,SAAS,MAAT,CAAgB,IAAhB,CAAsB,yBAAtB,CAArB;AACA,iBAAS,SAAT,CAAmB,EAAnB,CAAuB,OAAvB,EAAgC,YAAM;AAClC,oBAAS,QAAT;AACH,SAFD;AAGA,iBAAS,YAAT,GAAwB,SAAS,QAAT,CAAkB,IAAlB,CAAwB,qBAAxB,CAAxB;AACA,iBAAS,YAAT,CAAsB,EAAtB,CAA0B,OAA1B,EAAmC,YAAM;AAAE,yBAAc,QAAd;AAA0B,SAArE;AACA,eAAO,QAAP;AACH;;AAED,WAAO;AACH,gBAAS;AADN,KAAP;AAGH,CAnFD","file":"notes.js","sourcesContent":["/**\n * This module implements the local stemma drag-and-drop editing.\n *\n * @module local-stemma\n * @author Marcello Perathoner\n */\n\ndefine ([\n    'jquery',\n    'css!notes-css',\n],\n\nfunction ($) {\n    function dyn_resize (instance) {\n        let $ta = instance.$textarea;\n        let old_height = $ta.prop ('clientHeight');\n        $ta.css ('height', '1px'); // to get the correct value if smaller than the old value\n        let new_height = $ta.prop ('scrollHeight');\n        $ta.css ('height', old_height); // reset old value\n        $ta.animate ({ 'height' : new_height }, { 'duration' : 300, 'queue' : false });\n    }\n\n    function changed (instance) {\n        dyn_resize (instance);\n        instance.$save_button.prop ('disabled', instance.original_text == instance.$textarea.val ());\n        $ (document).trigger ('changed.ntg.notes');\n    }\n\n    /**\n     * Load a new passage.\n     *\n     * @function load_passage\n     *\n     * @param {Object} passage - Which passage to load.\n     */\n    function load_passage (passage) {\n        let instance = this;\n        instance.passage = passage;\n        let $ta = instance.$textarea;\n\n        let url = 'notes.txt/' + passage.pass_id;\n        let faded = $ta.animate ({ 'opacity' : 0.0 }, 300);\n        let req = $.get (url);\n\n        $.when (req, faded).done (function () {\n            $ta.val (req.responseText);\n            $ta.animate ({ 'opacity' : 1.0 }, 300);\n            instance.original_text = $ta.val ();\n            changed (instance);\n        });\n    }\n\n    function save_passage (instance) {\n        let url = 'notes.txt/' + instance.passage.pass_id;\n        $.ajax ({\n            'url'     : url,\n            'method'  : 'PUT',\n            'data'    : { 'remarks' : instance.$textarea.val () },\n            'success' : function (result) {\n                instance.original_text = instance.$textarea.val ();\n                changed (instance);\n            }\n        });\n    }\n\n    /**\n     * Initialize the module.\n     *\n     * @function init\n     *\n     * @param {Object} instance     - The panel module instance to inherit from.\n     * @param {string} id_prefix    - The prefix to use for all generated ids.\n     *\n     * @returns {Object} - The module instance object.\n     */\n    function init (instance, dummy_id_prefix) {\n        instance.load_passage = load_passage;\n        $.extend (instance.data, {});\n        instance.$textarea = instance.$panel.find ('.panel-content textarea');\n        instance.$textarea.on ('input', () => {\n            changed (instance);\n        });\n        instance.$save_button = instance.$toolbar.find ('button[name=\"save\"]');\n        instance.$save_button.on ('click', () => { save_passage (instance); });\n        return instance;\n    }\n\n    return {\n        'init' : init,\n    };\n});\n"]}