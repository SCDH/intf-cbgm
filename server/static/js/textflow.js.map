{"version":3,"sources":["../../es6/textflow.js"],"names":[],"mappings":"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","file":"textflow.js","sourcesContent":["/**\n * This module displays a textflow diagram.  A TD consists of one or more DAGs\n * (directed acyclic graphs) that show the relationship of all manuscripts that\n * have the same reading at one passage.  It can be used to deduce where a\n * reading came from.  This module uses a toolbar to refine the TD.\n *\n * @module textflow\n * @author Marcello Perathoner\n */\n\ndefine ([\n    'jquery',\n    'lodash',\n    'tools',\n    'toolbar',\n    'css!textflow-css',\n],\n\nfunction ($, _, tools, toolbar) {\n    function changed () {\n        // currently unused\n        $ (document).trigger ('ntg.textflow.changed');\n    }\n\n    /**\n     * Load a new passage.\n     *\n     * @function load_passage\n     *\n     * @param {Object} passage - Which passage to load.\n     *\n     * @return {Promise} Promise, resolved when the new passage has loaded.\n     */\n    function load_passage (passage) {\n        let instance = this;\n        instance.passage = passage;\n\n        let params = [\n            'labez', 'connectivity', 'range', 'include', 'fragments',\n            'mode', 'hyp_a', 'var_only', 'width', 'fontsize', 'cliques',\n        ];\n\n        // reset dropdown selection if reading is not in new passage\n        if (!instance.data.global && _.findIndex (\n            passage.readings, (o) => (o[0] === instance.data.labez)) === -1) {\n            instance.data.labez = passage.readings[0][0];\n            instance.data.hyp_a = 'A';\n        }\n\n        // dirty hack! Make panel visible so SVG getBBox () will work.\n        instance.$wrapper.slideDown ();\n\n        // provide a width and fontsize for GraphViz to format the graph\n        instance.data.width = instance.$wrapper.width ();                            // in px\n        instance.data.fontsize = parseFloat (instance.$wrapper.css ('font-size'));   // in px\n\n        let url = 'textflow.dot/' + passage.pass_id + '?' + $.param (_.pick (instance.data, params));\n        let png_url = 'textflow.png/' + passage.pass_id + '?' + $.param (_.pick (instance.data, params));\n        instance.graph.load_dot (url).done (() => {\n            instance.$panel.animate ({ 'width' : (instance.graph.bbox.width + 20) + 'px' });\n        });\n        let name = $.trim (instance.$panel.find ('.panel-caption').text ());\n        instance.$toolbar.find ('a[name=\"dot\"]').attr ('href', url).attr ('download', name + '.dot');\n        instance.$toolbar.find ('a[name=\"png\"]').attr ('href', png_url);\n\n        let p1 = toolbar.load_labez_dropdown (\n            instance.$toolbar.find ('div.toolbar-labez'), passage, 'labez', [], []);\n        let p2 = toolbar.load_labez_dropdown (\n            instance.$toolbar.find ('div.toolbar-hyp_a'), passage, 'hyp_a', [['A', 'A']], []);\n        let p3 = toolbar.load_range_dropdown (\n            instance.$toolbar.find ('div.toolbar-range'), passage, 'range',\n            [{ 'range' : 'This', 'value' : 'x' }], []);\n\n        return $.when (p1, p2, p3).done (() => {\n            toolbar.set_toolbar_buttons (instance.$toolbar, instance.data);\n            // Maybe we changed range while navigating.  Set a new range.\n            instance.$toolbar.find ('div.toolbar-range input[data-opt = \"x\"]')\n                .attr ('data-opt', passage.chapter);\n            changed ();\n        });\n    }\n\n    /**\n     * Open a context menu when right clicked on a node.\n     *\n     * The context menu can be used to reassign the node to a different split.\n     *\n     * @function open_contextmenu\n     *\n     * @param {Object} event - The event\n     */\n\n    function open_contextmenu (event) {\n        event.preventDefault ();\n\n        let passage = event.data.passage;\n        let xhr = $.getJSON ('cliques.json/' + passage.pass_id);\n        xhr.done ((json) => {\n            let instance = event.data;\n            let msid     = event.target.parentNode.dataset.msId;\n            let dataset  = event.target.dataset;\n            let data = {\n                'labez_old'  : dataset.labez,\n                'clique_old' : dataset.clique,\n            };\n\n            // build the context menu\n            let menu  = $ ('<table class=\"contextmenu\"></table>');\n            menu.append ($ (\n                tools.format (\n                    '<tr class=\"ui-state-disabled\">' +\n                        '<td class=\"bg_labez\" data-labez=\"{labez_old}\"></td>' +\n                        '<td>{labez_old}{clique_old}</td>' +\n                        '</tr>',\n                    data\n                )\n            ));\n            menu.append ($ ('<tr><td>-</td><td>-</td></tr>'));\n\n            let cliques = _.filter (json.data, (o) => (o[0][0] !== 'z'));\n            _.forEach (cliques, (value) => {\n                data.labez_new  = value[0];\n                data.clique_new = value[1];\n\n                if (data.labez_new === data.labez_old && data.clique_new !== data.clique_old) {\n                    menu.append ($ (tools.format (\n                        '<tr data-action=\"move-manuscripts\" ' +\n                            'data-labez_old=\"{labez_old}\" data-clique_old=\"{clique_old}\" ' +\n                            'data-labez_new=\"{labez_new}\" data-clique_new=\"{clique_new}\">' +\n                            '<td class=\"bg_labez\" data-labez=\"{labez_old}\"></td>' +\n                            '<td>Move subtree to {labez_new}{clique_new}</td>' +\n                            '</tr>',\n                        data\n                    )));\n                }\n            });\n\n            menu.menu ({\n                'select' : (ev, ui) => {\n                    let tr = ui.item[0];\n\n                    // console.log ('Selected: ' + $ (tr).text ());\n\n                    let xhr2 = $.getJSON (\n                        'stemma-edit/' + passage.pass_id,\n                        // do not extend the dataset itself,\n                        // because arrays cannot be part of\n                        // datasets\n                        $.extend ({}, tr.dataset, {\n                            'ms_ids' : tools.bfs (instance.graph.edges, msid),\n                        })\n                    );\n                    xhr2.done ((json2) => {\n                        // stemma-edit returns the changed passage\n                        $ (document).trigger ('ntg.panel.reload', json2.data);\n                    });\n                    xhr2.fail ((xhrobj) => {\n                        tools.xhr_alert (xhrobj, event.data.$wrapper);\n                    });\n                    menu.fadeOut (() => { menu.remove (); });\n                },\n            });\n            tools.svg_contextmenu (menu, event.target);\n        });\n    }\n\n    /**\n     * Initialize the module.\n     *\n     * This module inherits from module :mod:`panel` and uses module\n     * :mod:`d3-stemma-layout` to actually draw the graph.\n     *\n     * @function init\n     *\n     * @param {Object} instance     - The panel instance to inherit from.\n     * @param {Object} graph_module - The graph module to use.\n     * @param {string} id_prefix    - The prefix to use for all generated ids.\n     * @param {bool}   global       - Display global textual flow\n     * @param {bool}   var_only     - Display only nodes and links between different readings.\n     *\n     * @returns {Object} The module instance object.\n     */\n    function init (instance, graph_module, id_prefix, global, var_only) {\n        instance.load_passage = load_passage;\n        $.extend (instance.data, {\n            'passage'      : null,\n            'global'       : global,\n            'labez'        : '',\n            'connectivity' : '5',\n            'range'        : 'All',\n            'include'      : [],\n            'fragments'    : [],\n            'mode'         : 'sim',\n            'hyp_a'        : 'A',\n            'var_only'     : var_only ? ['var_only'] : [],\n            'cliques'      : [],\n        });\n        instance.$wrapper = instance.$panel.find ('.panel-content'); // see: dirty hack\n\n        instance.graph = graph_module.init (instance.$wrapper, id_prefix);\n\n        if (is_editor) {\n            instance.$panel.on ('contextmenu', 'g.node', instance, open_contextmenu);\n        }\n\n        return instance;\n    }\n\n    return {\n        'init' : init,\n    };\n});\n"]}