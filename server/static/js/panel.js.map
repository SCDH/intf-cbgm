{"version":3,"sources":["../../es6/panel.es6"],"names":[],"mappings":"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","file":"panel.js","sourcesContent":["/**\n * This module is the base for a panel.  It implements the toolbars and the\n * minimize/maximize functionality and updates the panel only while it is open.\n *\n * @module panel\n *\n * @author Marcello Perathoner\n */\n\ndefine ([\n    'jquery',\n    'lodash',\n    'bootstrap',\n    'bootstrap-slider',\n    'css!panel-css',\n    'css!bootstrap-slider-css',\n],\n\nfunction ($, _) {\n    function on_maximizing_panel_visibility (event) {\n        var instance = event.data;\n\n        instance.visible = true;\n        if (instance.dirty) {\n            instance.dirty = false;\n            instance.load_passage (instance.data.passage);\n        }\n    }\n\n    function on_minimizing_panel_visibility (event) {\n        var instance = event.data;\n\n        instance.visible = false;\n    }\n\n    /**\n     * Retrieve and display new gagdet content.\n     *\n     * @function load\n     *\n     * @param {Object} passage - Passage data\n     */\n\n    function load (passage) {\n        var instance = this;\n\n        instance.data.passage = passage;\n        if (instance.visible) {\n            instance.load_passage (passage);\n        } else {\n            instance.dirty = true;\n        }\n    }\n\n    function get_control_type ($input) {\n        return $input.attr ('data-type') || $input.attr ('type') || 'button';\n    }\n\n    function connectivity_formatter (s) {\n        return (s === 21) ? 'All' : s;\n    }\n\n    /**\n     * Read the status of the toolbar buttons after event\n     *\n     * @function handle_toolbar_events\n     *\n     * @param {Object} event - The event.  The status is saved in\n     *                         event.data.data\n     */\n\n    function handle_toolbar_events (event) {\n        if (event.type === 'click' || event.type === 'slideStop') {\n            var opts    = event.data.data;\n            var $target = $ (event.target);\n            var $group  = $target.closest ('.btn-group');\n            var name    = $target.attr ('name');\n            var type    = get_control_type ($target);\n\n            switch (type) {\n            case 'checkbox':\n                opts[name] = [];\n                $group.find ('input:checked').each (function (i, btn) {\n                    opts[name].push ($ (btn).attr ('data-opt'));\n                });\n                break;\n            case 'radio':\n                opts[name] = $target.attr ('data-opt');\n                break;\n            case 'slider':\n                opts[name] = $target.bootstrapSlider ('getValue');\n                break;\n            case 'dropdown':\n                opts[name] = $target.attr ('data-opt');\n                var $dropdown = $group.parent ().closest ('.btn-group').find ('button[data-toggle=\"dropdown\"]');\n                $dropdown.dropdown ('toggle'); // close\n                break;\n            default:\n            }\n        }\n    }\n\n    function on_toolbar (event) {\n        var instance = event.data;\n\n        handle_toolbar_events (event);\n        instance.load_passage (instance.data.passage);\n\n        event.stopPropagation ();\n    }\n\n    /**\n     * Set the status of the toolbar buttons\n     *\n     * @function set_toolbar_buttons\n     *\n     * @param {jQuery} $toolbar   - The toolbar\n     * @param {Object} new_status - The new status of the toolbar buttons\n     */\n\n    function set_toolbar_buttons ($toolbar, new_status) {\n        var $panel = $toolbar.closest ('div.panel');\n\n        _.forEach (new_status, function (value, key) {\n            var $input = $panel.find ('input[name=\"' + key  + '\"]');\n            var $group = $input.closest ('.btn-group');\n            var type   = get_control_type ($input);\n\n            switch (type) {\n            case 'checkbox':\n                $group.find ('label.btn').removeClass ('active');\n                $group.find ('input').prop ('checked', false);\n\n                _.forEach (value, function (v) {\n                    $input = $group.find ('input[name=\"' + key  + '\"][data-opt=\"' + v + '\"]');\n                    $input.prop ('checked', true);\n                    $input.closest ('label.btn').addClass ('active');\n                });\n                break;\n            case 'radio':\n                $input = $group.find ('input[name=\"' + key  + '\"][data-opt=\"' + value + '\"]');\n                $input.checked = true;\n                $group.find ('label.btn').removeClass ('active');\n                $input.closest ('label.btn').addClass ('active');\n                break;\n            case 'slider':\n                $input.bootstrapSlider ('setValue', +value);\n                $panel.find ('span.connectivity-label').text (connectivity_formatter (value));\n                break;\n            case 'dropdown':\n                if (key === 'hyp_a') {\n                    key = 'labez';\n                }\n                var $dropdown = $group.parent ().closest ('.btn-group').find ('button[data-toggle=\"dropdown\"]');\n                $dropdown.attr ('data-' + key, value);\n                var i18n = $.trim ($group.find (`label.btn[data-${key}=\"${value}\"]`).text ());\n                $dropdown.find ('span.btn_text').text (i18n);\n                break;\n            default:\n            }\n        });\n    }\n\n    /**\n     * Loads the buttons in the labez dropdown.\n     *\n     * Loads the buttons in the labez dropdown with the labez of the readings of\n     * the passage.\n     *\n     * @function load_labez_dropdown\n     *\n     * @param {jQuery} $group      - The button group\n     * @param {int|string} pass_id - The passage id\n     * @param {string} input_name  - <input name=name ...>\n     * @param {Array} prefixes     - Strings to prepend to the list.\n     * @param {Array} suffixes     - Strings to append to the list.\n     *\n     * @return {Promise} Promise, resolved when the buttons are loaded.\n     */\n\n    function load_labez_dropdown ($group, pass_id, input_name, prefixes, suffixes) {\n        var deferred = $.Deferred ();\n        var $menu = $group.find ('div[data-toggle=\"buttons\"]');\n\n        $.getJSON ('passage.json/' + pass_id, json => {\n            $menu.empty ();\n            var readings = prefixes.concat (json.data.readings).concat (suffixes);\n            for (const [labez, labez_i18n] of readings) {\n                if (labez[0] !== 'z') {\n                    $menu.append (`<label class=\"btn btn-primary btn-labez bg_labez\" data-labez=\"${labez}\">\n                                     <input type=\"radio\" data-type=\"dropdown\" name=\"${input_name}\"\n                                            data-opt=\"${labez}\">${labez_i18n}</input>\n                                   </label>`);\n                }\n            };\n            deferred.resolve ();\n        });\n        return deferred.promise ();\n    }\n\n    /**\n     * Loads the buttons in the cliques dropdown.\n     *\n     * Loads the buttons in the cliques dropdown with the cliques of the\n     * passage.\n     *\n     * @function load_cliques_dropdown\n     *\n     * @param {jQuery} $group      - The button group\n     * @param {int|string} pass_id - The passage id\n     * @param {string} input_name  - <input name=name ...>\n     * @param {Array} prefixes     - Strings to prepend to the list.\n     * @param {Array} suffixes     - Strings to append to the list.\n     *\n     * @return {Promise} Promise, resolved when the buttons are loaded.\n     */\n\n    function load_cliques_dropdown ($group, pass_id, input_name, prefixes, suffixes) {\n        var deferred = $.Deferred ();\n        var $menu = $group.find ('div[data-toggle=\"buttons\"]');\n\n        $.getJSON ('passage.json/' + pass_id, json => {\n            $menu.empty ();\n            var cliques = prefixes.concat (json.data.cliques).concat (suffixes);\n            for (const [labez, , clique] of cliques) {\n                if (labez[0] !== 'z') {\n                    $menu.append (`<label class=\"btn btn-primary btn-labez bg_labez\" data-labez=\"${labez}\">\n                                     <input type=\"radio\" data-type=\"dropdown\" name=\"${input_name}\"\n                                            data-opt=\"${clique}\">${clique}</input>\n                                   </label>`);\n                }\n            };\n            deferred.resolve ();\n        });\n        return deferred.promise ();\n    }\n\n    /**\n     * Loads the buttons in the range dropdown.\n     *\n     * Loads the buttons in the range dropdown with the ranges of the book.\n     *\n     * @function load_range_dropdown\n     *\n     * @param {jQuery} $group      - The button group\n     * @param {int|string} pass_id - The passage id\n     * @param {string} input_name  - The button(s) name\n     * @param {Array} prefixes     - Strings to prepend to the list.\n     * @param {Array} suffixes     - Strings to append to the list.\n     *\n     * @return {Promise} Promise, resolved when the buttons are loaded.\n     */\n\n    function load_range_dropdown ($group, pass_id, input_name, prefixes, suffixes) {\n        var deferred = $.Deferred ();\n        var $menu = $group.find ('div[data-toggle=\"buttons\"]');\n\n        $.getJSON ('ranges.json/' + pass_id, json => {\n            $menu.empty ();\n            var ranges = prefixes.concat (json.data.ranges).concat (suffixes);\n            for (const range of ranges) {\n                $menu.append (`<label class=\"btn btn-primary btn-range\" data-range=\"${range.value}\">\n                                 <input type=\"radio\" data-type=\"dropdown\" name=\"${input_name}\"\n                                        data-opt=\"${range.value}\">${range.range}</input>\n                               </label>`);\n            };\n            deferred.resolve ();\n        });\n        return deferred.promise ();\n    }\n\n    /**\n     * Put min-max and close buttons onto panels.\n     *\n     * Put minimize and maximize buttons on panels that contain\n     * div.panel-slidable panes.  Put close buttons on panels that contain\n     * div.panel-closable panes.\n     *\n     * @function create_panel_controls\n     *\n     * @param {jQuery} $panels - The panel(s)\n     */\n\n    function create_panel_controls ($panels) {\n        $panels.each (function () {\n            var $panel = $ (this);\n            if ($panel.find ('div.panel-slidable').length > 0) {\n                $panel.find ('div.panel-caption').prepend (\n                    '<a class=\"close panel-minimize\"><span class=\"glyphicon glyphicon-collapse-up\"></span></a>' +\n                    '<a class=\"close panel-maximize\"><span class=\"glyphicon glyphicon-collapse-down\"></span></a>'\n                );\n            }\n            // append the buttons in inverse order because they float right\n            if ($panel.hasClass ('panel-closable')) {\n                $panel.find ('div.panel-caption').prepend (\n                    '<a class=\"close panel-close\"><span class=\"glyphicon glyphicon-remove\"></span></a>'\n                );\n            }\n        });\n    }\n\n    /**\n     * Setup the minimize, maximize, and close button event handlers.\n     *\n     * @function setup_button_event_handlers\n     */\n\n    function setup_button_event_handlers () {\n        // Click on minimize icon\n        $ (document).on ('click', 'a.panel-minimize', function (event) {\n            var $this = $ (this);\n            var $panel = $this.closest ('div.panel');\n            $panel.trigger ('minimizing.panel.visibility');\n            $panel.find ('.panel-slidable').slideUp (function () {\n                $panel.trigger ('minimized.panel.visibility');\n                $panel.trigger ('changed.panel.visibility');\n            });\n            event.stopPropagation ();\n        });\n\n        // Click on maximize icon\n        $ (document).on ('click', 'a.panel-maximize', function (event) {\n            var $this = $ (this);\n            var $panel = $this.closest ('div.panel');\n            $panel.trigger ('maximizing.panel.visibility');\n            $panel.find ('.panel-slidable').slideDown (function () {\n                $panel.trigger ('maximized.panel.visibility');\n                $panel.trigger ('changed.panel.visibility');\n            });\n            event.stopPropagation ();\n        });\n\n        // Click on close icon\n        $ (document).on ('click', 'a.panel-close', function (event) {\n            var $this = $ (this);\n            var $panel = $this.closest ('div.panel');\n            $panel.trigger ('closing.panel.visibility');\n            $panel.fadeOut (function () {\n                $panel.trigger ('closed.panel.visibility');\n                $panel.trigger ('changed.panel.visibility');\n                $panel.remove ();\n            });\n            event.stopPropagation ();\n        });\n    }\n\n    /**\n     * Initialize the module.\n     *\n     * @function init\n     *\n     * @param {Object} $panel - The panel element.\n     *\n     * @returns {Object} The module instance object.\n     */\n\n    function init ($panel) {\n        var instance = {};\n        instance.load             = load;\n        instance.visible          = true;\n        instance.dirty            = true;\n        instance.data             = {};\n\n        instance.$panel           = $panel;\n        instance.$toolbar         = $panel.find ('div.toolbar');\n\n        // The user navigated to new passage.\n        $ (document).on ('ntg.panel.reload', function (event, passage) {\n            instance.load (passage);\n        });\n\n        setup_button_event_handlers ();\n\n        // Init toolbar.\n        instance.$toolbar.find ('.dropdown-toggle').dropdown ();\n\n        instance.$toolbar.find ('input[name=\"connectivity\"]').bootstrapSlider ({\n            'value'           : 5,\n            'ticks'           : [1,  5, 10, 20,  21],\n            'ticks_positions' : [0, 25, 50, 90, 100],\n            'formatter'       : connectivity_formatter,\n        });\n\n        // Answer toolbar activity.\n        instance.$toolbar.on ('click slideStop', 'input', instance, on_toolbar);\n\n        // Answer maximizing / minimizing\n        instance.$panel.on ('maximizing.panel.visibility', instance, on_maximizing_panel_visibility);\n        instance.$panel.on ('minimizing.panel.visibility', instance, on_minimizing_panel_visibility);\n\n        return instance;\n    }\n\n    return {\n        'init'                  : init,\n        'set_toolbar_buttons'   : set_toolbar_buttons,\n        'load_labez_dropdown'   : load_labez_dropdown,\n        'load_cliques_dropdown' : load_cliques_dropdown,\n        'load_range_dropdown'   : load_range_dropdown,\n        'create_panel_controls' : create_panel_controls,\n    };\n});\n"]}